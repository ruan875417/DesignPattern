#include "Invoker.h"
/********************************************** 
* 命令模式原理： 
*    将一个请求封装成对象，从而使你可以用不同的 
* 请求对客户进行参数化；对请求排队或记录请求日志 
* ，以及支持可撤销的操作。 

* 总结： 
*   1、它能较容易地设计一个命令队列； 
*   2、在需要的情况下，可以较容易将命令记入日志； 
*   3、允许接收请求的一方决定是否要否决请求； 
*   4、可以容易地实现对请求的撤销和重做； 
*   5、由于加进新的具体命令类不影响其它类，因此增加具体的命令类很容易实现。 
*   6、把请求的一个操作的对象与知道怎么执行一个操作的对象分隔开。 
*   7、敏捷开发原则告诉我们，不要为代码添加基于猜测的、实际不需要的功能。 
*      如果不清楚一个系统是否需要命令模式，一般不要急着去实现它，事实上 
*      在需要的时候通过重构实现这个模式并不困难，只有真正需要如撤销/恢复 
*      操作等功能时，把原来的代码重构为命令模式才有意义。 
************************************************************************/  
int main(){
    Receiver* receiver=new Receiver;
    Command* command=new ConcreteCommand(receiver);
    Invoker* invoker=new Invoker;
    invoker->setCommand(command);
    invoker->excuteCommand();
    
    system("pause");
    return 0;
}
